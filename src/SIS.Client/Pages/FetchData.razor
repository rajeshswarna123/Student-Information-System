@page "/fetchdata"
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject HttpClient Http
@using System.Net.Http.Headers
@using SIS.Models
@using Newtonsoft.Json

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (students == null)
{
    <p><em>Loading students...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Roll Number</th>
                <th>Name</th>
                <th>Class</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.RollNumber</td>
                    <td>@student.Name</td>
                    <td>@student.Class</td>
                    <td>
                        <button class="btn btn-primary" data-toggle="modal" data-target="#deleteEmpModal" @onclick="@(e => toggleStudentDetails(student.Id))">
                            View Details
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (isModalVisible)
{
    <div class="modal d-block" id="deleteEmpModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Student Details</h3>
                    <button type="button" class="close" data-dismiss="modal" @onclick="@(e => toggleStudentDetails())">
                        <span aria-hidden="true">x</span>
                    </button>
                </div>
                <div class="modal-body">
                    @if (studentDetails == null)
                    {
                        <p><em>Loading student details...</em></p>
                    }
                    else
                    {
                        <table class="table">
                            <tr>
                                <th>Roll Number</th>
                                <td>@studentDetails.RollNumber</td>
                            </tr>
                            <tr>
                                <th>Name</th>
                                <td>@studentDetails.Name</td>
                            </tr>
                            <tr>
                                <th>Class</th>
                                <td>@studentDetails.Class</td>
                            </tr>
                        </table>
                        @if (studentMarks == null)
                        {
                            <p><em>Loading marks...</em></p>
                        }
                        else
                        {
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Subject Name</th>
                                        <th>Marks Obtained / Total Marks</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var studentMark in studentMarks)
                                    {
                                        <tr>
                                            <td>@studentMark.Subject</td>
                                            <td>@studentMark.ObtainedMarks / @studentMark.MaxMarks</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}
@code {

    private WeatherForecast[] forecasts;
    private List<Models.Student> students;
    private Models.Student studentDetails;
    private bool isModalVisible;
    private List<Models.Marks> studentMarks;

    private async void toggleStudentDetails(int studentId = 0)
    {
        isModalVisible = !isModalVisible;
        if (isModalVisible)
        {
            studentDetails = await Http.GetFromJsonAsync<Models.Student>($"api/Student/getstudentbyid/{studentId}");
            studentMarks = await Http.GetFromJsonAsync<List<Models.Marks>>($"api/Student/getmarksbyid/{studentId}");
        }
        else
        {
            studentDetails = null;
            studentMarks = null;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:44340/api/Student/getallstudents");

        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await localStore.GetItemAsync<string>("UserToken"));
        var httpClient = new HttpClient();
        // send request
        using var httpResponse = await httpClient.SendAsync(request);

        //convert http response data to UsersResponse object
        var response = await httpResponse.Content.ReadAsStringAsync();
        students = JsonConvert.DeserializeObject<List<Models.Student>>(response);

        //students = await Http.GetFromJsonAsync<List<Models.Student>>("api/Student/getallstudents");
        Console.WriteLine("******************************************");
        Console.WriteLine(await localStore.GetItemAsync<string>("UserToken"));
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}